name: deploy gc back
on: [push]
env:
  IMAGE: gc-front
  VERSION: 0.0.1
jobs:
  create-folder:
    name: create folder
    runs-on: ubuntu-latest

    steps:
      - name: execute commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            mkdir /opt/applications/gc/${{env.IMAGE}}
            ls -al /opt/applications/gc

  generate-image:
    name: generate image
    runs-on: ubuntu-latest
    needs: ['create-folder']
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: coderlady/${{env.IMAGE}}:${{env.VERSION}}

  run-container:
    name: run container
    runs-on: ubuntu-latest
    needs: [ 'create-folder', 'generate-image' ]
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: copy file via ssh key
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "compose.yml"
          target: /opt/applications/gc/${{env.IMAGE}}
      - name: execute commands to run container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            docker network inspect app-network >/dev/null 2>&1 || docker network create app-network
            
         
            docker compose -f /opt/applications/gc/${{env.IMAGE}}/compose.yml up -d

